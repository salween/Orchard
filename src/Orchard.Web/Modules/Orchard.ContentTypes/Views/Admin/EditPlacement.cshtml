@model Orchard.ContentTypes.ViewModels.EditPlacementViewModel
@{
    Style.Require("ContentTypesAdmin");
    Style.Require("Bootstrap");
    Script.Require("Bootstrap");
    Script.Require("jQueryUI_Sortable");
    Script.Include("contenttype-arrangement.js");
    Layout.Title = T("Edit Placement - {0}", Model.ContentTypeDefinition.DisplayName).ToString();

    var allTabs = Model.AllPlacements.Where(x => !string.IsNullOrEmpty(x.PlacementSettings.Tab)).Select(x => x.PlacementSettings.Tab).Distinct().ToList();
    var indexOfTabContent = allTabs.IndexOf("Content");
    if (indexOfTabContent > -1)
    {
        allTabs.RemoveAt(indexOfTabContent);
    }
    allTabs.Insert(0, "Content");
    var hiddenShapes = Model.AllPlacements.Where(x => String.IsNullOrEmpty(x.PlacementSettings.Zone) && (String.IsNullOrWhiteSpace(x.PlacementSettings.Position) || x.PlacementSettings.Position == "-"));
}

<div id="save-message" class="message message-Warning">@T("You need to hit \"Save\" in order to save your changes.")</div>

@using (Html.BeginFormAntiForgeryPost()) {
    @Html.ValidationSummary()


    <ul id="placement">
        @foreach (var tab in allTabs) {
            <li>
                <div class="shape-type">
                    <h3 class="@(tab != "Content"? "clickable" : "")">@tab</h3>
                    @if (tab != "Content") {
                        <div style="display: none">
                            <input type="text" value="@tab" />
                            <span class="glyphicon glyphicon-ok"></span>
                            <span class="glyphicon glyphicon-remove"></span>
                        </div>
                    }
                </div>
                <ul data-tab="@tab">

                </ul>
            </li>
        }
        @for (int i = 0; i < Model.AllPlacements.Count; i++ ) {

            var placement = Model.AllPlacements[i].PlacementSettings;

            if(placement.Zone != "Content") {
                continue;
            }
            <li data-shape-type="@placement.ShapeType" data-shape-differentiator="@placement.Differentiator" data-shape-zone="Content" data-shape-position="@placement.Position" content-part @Html.Raw(string.IsNullOrEmpty(placement.Tab) ? "" : string.Format("data-tab='{0}'", placement.Tab))>
                <div class="shape-type"><h3 class="pull-left">@placement.ShapeType @placement.Differentiator</h3><button class="show-hide pull-right">hide</button></div>
				<div class="shape-editor">
					@try {
						@Display(Model.AllPlacements[i].Shape)
					}
					catch {
					}
				</div>
                
                @*  @shape.Position @(Model.PlacementSettings.Any(x => x.Equals(shape)))*@
                @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.ShapeType, new { @class = "type" })
                @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Differentiator, new { @class = "differentiator" })
                @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Zone, new { @class = "zone" })
                @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Position, new { @class = "position" })
                @Html.HiddenFor(m => m.AllPlacements[i].PlacementSettings.Tab, new { @class = "tab" })
            </li>
        }
    </ul>
    
    <fieldset class="action">
        <button class="primaryAction" type="submit" name="submit.Save" value="Save">@T("Save")</button>
        <button class="primaryAction" type="submit" name="submit.Restore" value="Restore" itemprop="RemoveUrl" data-message="@T("Are you sure you want to restore these placements?")">@T("Restore")</button>
    </fieldset>

}

@using (Script.Foot()) {
<script type="text/javascript">
//<![CDATA[
    (function ($) {
        $('.shape-editor *').attr('disabled', 'disabled');
    })(jQuery);
//]]>
</script>
}